pragma solidity >=0.7.0 <0.9.0;


interface IERC20Token {

    function getTotalSupply() external view returns (uint256);
    function balanceOf(address _owner) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);

    function transfer(address receiver, uint tokens) external returns (bool);
    function approve(address spender, uint tokens) external returns (bool);
    function transferFrom(address sender, address recipient, uint tokens) external returns (bool);


    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ERC20Token is IERC20Token {
    

    uint256 totalSupply;
    mapping(address => uint256) balances;

    //how much two accounts are allowed to withdraw together
    mapping(address => mapping (address => uint256)) allowed;


    function getTotalSupply() public override view returns (uint){
        return totalSupply;
    }

    function balanceOf(address _owner) public override view returns(uint){
        return balances[_owner];
    }

    function transfer(address receiver, uint tokens) public override returns (bool) {
        require(tokens <= balances[msg.sender], "You don't have enough balance");
        balances[msg.sender] = balances[msg.sender] - tokens;
        balances[receiver] += tokens;
        emit Transfer(msg.sender, receiver, tokens);
        return true;
    }

    function transferFrom(address sender, address recipient, uint tokens) public override returns (bool) {
        require(tokens <= balances[sender], "You don't have enough balance");
        require(tokens <= allowed[sender][msg.sender], "You are not allowed to send this number of tokens");
        balances[sender] = balances[sender] - tokens;
        allowed[sender][msg.sender] = allowed[sender][msg.sender] - tokens;
        balances[recipient] = balances[recipient] + tokens;
        emit Transfer(sender, recipient, tokens);
        return true;
    }

    // approve a spender account to transfer tokens from owner's account
    function approve(address spender, uint tokens) public override returns (bool) {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }

    // returns the amount which spender is still allowed to withdraw from owner.
    function allowance(address owner, address spender) public override view returns (uint) {
        return allowed[owner][spender];
    }

}

contract ProjectTestCoin is ERC20Token { 


    string public name;                   
    uint8 public decimals;               
    string public symbol;                
    uint256 public unitsOneEthCanBuy;         
    address public owner;           

    
    constructor() {
        // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000
        balances[msg.sender] = 1000000000000000000000;               
        totalSupply = 1000000000000000000000;                        
        name = "ProjectTestCoin";                                   
        decimals = 18;                                              
        symbol = "PTC";                                            
        unitsOneEthCanBuy = 10;                                     
        owner = msg.sender;                                    
    }

    fallback() external payable {
        uint256 amount = msg.value * unitsOneEthCanBuy;
        require(balances[owner] >= amount, "Not sufficient tokens");

        balances[owner] = balances[owner] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        emit Transfer(owner, msg.sender, amount); // Broadcast a message to the blockchain

        payable(owner).transfer(msg.value);                          
    }

}
